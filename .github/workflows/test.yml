name: Core Repo Tests

on:
  push:
    branches-ignore:
    - 'release/*'
  pull_request:
env:
  # Set variable to 'main' if your change will not affect Contrib.
  # Otherwise, set variable to the commit of your branch on
  # opentelemetry-python-contrib which is compatible with these Core repo
  # changes.
  CONTRIB_REPO_SHA: 481972cf87c1506e789f586843ba82d93633eac7
  # This is needed because we do not clone the core repo in contrib builds anymore.
  # When running contrib builds as part of core builds, we use actions/checkout@v2 which
  # does not set an environment variable (simply just runs tox), which is different when
  # contrib builds are run directly from contrib (since test.yml is executed, which sets CORE_REPO_SHA)
  # The solution is to include CORE_REPO_SHA as part of THIS environment so it can be accessed
  # from within the contrib build.
  CORE_REPO_SHA: ${{ github.sha }}

jobs:
  benchmark:
    env:
      py311: "3.11"
      RUN_MATRIX_COMBINATION: ${{ matrix.python-version }}-${{ matrix.package }}-${{
        matrix.os }}
    runs-on: self-hosted
    strategy:
      fail-fast: false  # ensures the entire test matrix is run, even if one permutation fails
      matrix:
        python-version: [py311]
        package: ["sdk"]
        os: [ubuntu-20.04]
    steps:
    - name: Checkout Core Repo @ SHA - ${{ github.sha }}
      uses: actions/checkout@v2
    - name: Set up Python ${{ env[matrix.python-version] }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ env[matrix.python-version] }}
        architecture: 'x64'
    - name: Install tox
      run: pip install tox==3.27.1 -U tox-factor
    - name: Cache tox environment
        # Preserves .tox directory between runs for faster installs
      uses: actions/cache@v2
      with:
        path: |
          .tox
          ~/.cache/pip
        key: v3-tox-cache-${{ env.RUN_MATRIX_COMBINATION }}-${{ hashFiles('tox.ini',
          'dev-requirements.txt') }}-core
    - name: run tox
      run: tox -f ${{ matrix.python-version }}-${{ matrix.package }} -- --benchmark-json=${{
        env.RUN_MATRIX_COMBINATION }}-benchmark.json
       - name: Find and merge benchmarks
         id: find_and_merge_benchmarks
         run: >-
           jq -s '.[0].benchmarks = ([.[].benchmarks] | add)
           | if .[0].benchmarks == null then null else .[0] end'
           $(find . -name '*${{ matrix.package }}*-benchmark.json') > output.json
           && echo "json_plaintext=$(cat output.json)" >> $GITHUB_OUTPUT
       - name: Report on benchmark results
         if: steps.find_and_merge_benchmarks.outputs.json_plaintext != 'null'
         uses: benchmark-action/github-action-benchmark@v1
         with:
           name: OpenTelemetry Python Benchmarks - Python ${{ env[matrix.python-version ]}} - ${{ matrix.package }}
           tool: pytest
           output-file-path: output.json
           github-token: ${{ secrets.GITHUB_TOKEN }}
           max-items-in-chart: 100
           # Alert with a commit comment on possible performance regression
           alert-threshold: 200%
           fail-on-alert: true
           # Make a commit on `gh-pages` with benchmarks from previous step
           auto-push: ${{ github.ref == 'refs/heads/main' }}
           gh-pages-branch: gh-pages
           benchmark-data-dir-path: benchmarks
